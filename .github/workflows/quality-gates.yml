name: Quality Gates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ============================================
  # Gate 1: Code Style
  # ============================================
  code-style:
    name: Code Style (PHP CS Fixer)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP CS Fixer
        run: composer lint

  # ============================================
  # Gate 2: Static Analysis (PHPStan - disabled for now)
  # ============================================
  static-analysis:
   name: Static Analysis (PHPStan)
   runs-on: ubuntu-latest

   steps:
     - name: Checkout code
       uses: actions/checkout@v4

     - name: Setup PHP
       uses: shivammathur/setup-php@v2
       with:
         php-version: '8.3'
         coverage: none

     - name: Cache Composer dependencies
       uses: actions/cache@v4
       with:
         path: vendor
         key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
         restore-keys: |
           ${{ runner.os }}-composer-

     - name: Install dependencies
       run: composer install --prefer-dist --no-progress --no-interaction

     - name: Run PHPStan
       run: composer stan

  # ============================================
  # Gate 3: Unit Tests
  # ============================================
  tests:
    name: Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: ['8.2', '8.3', '8.4']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, xml, ctype, json
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php${{ matrix.php }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run tests
        run: composer test

      - name: Generate coverage report
        if: matrix.php == '8.3'
        run: vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.php == '8.3'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # ============================================
  # Gate 4: Security Check
  # ============================================
  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Security check (Composer audit)
        run: composer audit

  # ============================================
  # All Gates Passed
  # ============================================
  quality-gates-passed:
    name: âœ… All Quality Gates Passed
    runs-on: ubuntu-latest
    needs: [code-style, static-analysis, tests, security]

    steps:
      - name: All gates passed
        run: echo "ðŸŽ‰ All quality gates passed successfully!"